from tkinter import *
from tkinter import filedialog, messagebox
from tkinter import font as tkFont
import requests
import base64
import os
from PIL import Image, ImageTk

window = Tk()

try:
    ico = Image.open(os.environ["temp"] + "\\tungsten.png")
    photo = ImageTk.PhotoImage(ico)
    window.wm_iconphoto(False, photo)

except:
    # ouch
    icon = ""

    img = icon.encode()
    img_data = base64.b64decode(img)

    with open(os.environ["temp"] + "\\tungsten.png", "wb") as iconfile:
        iconfile.write(img_data)

    ico = Image.open(os.environ["temp"] + "\\tungsten.png")
    photo = ImageTk.PhotoImage(ico)
    window.wm_iconphoto(False, photo)

def video():
    # Download the file!

    headers = {'Content-type': 'application/json', 'Accept': 'application/json'}

    req = requests.post("https://co.wuk.sh/api/json", json={"url": url.get()}, headers=headers)

    json = req.json()

    fileUrl = json["url"]

    selected_folder = filedialog.askdirectory()

    filename = fileUrl.split("&i=")[-1]

    messagebox.Message(message="Downloading to " + selected_folder + "\\" + filename + ".mp4").show()

    contents = requests.get(fileUrl).content

    with open(selected_folder + "\\" + filename + ".mp4", "wb") as file:
        file.write(contents)

    messagebox.Message(message="Done!").show()

def audio():
    # Download the file!

    headers = {'Content-type': 'application/json', 'Accept': 'application/json'}

    req = requests.post("https://co.wuk.sh/api/json", json={"url": url.get(), "isAudioOnly": True}, headers=headers)

    json = req.json()

    try:
        json["url"]

    except:
        try:
            messagebox.Message(message=json["text"]).show()

        except:
            messagebox.Message(message="WHAT DID YOU DO").show()

    fileUrl = json["url"]

    selected_folder = filedialog.askdirectory()

    filename = fileUrl.split("&i=")[-1]

    messagebox.Message(message="Downloading to " + selected_folder + "\\" + filename + ".mp3").show()

    contents = requests.get(fileUrl).content

    with open(selected_folder + "\\" + filename + ".mp3", "wb") as file:
        file.write(contents)

    messagebox.Message(message="Done!").show()

btnFont = tkFont.Font(family="Jetbrains Mono", size=24)

url = StringVar(window)

window.geometry("600x160")
window.configure(background="black")
window.title("Tungsten")

label = Label(window, text="Tungsten", font=("Jetbrains Mono", 32), foreground="white", background="black")
label.pack()

urlEntry = Entry(window, textvariable=url, font=("Jetbrains Mono", 24), width=30, bg="black", fg="white")

urlEntry.config(highlightthickness=2)
urlEntry.config(highlightbackground = "white", highlightcolor= "white")

audioButton = Button(window, text="MP3", width=15, command=audio, font=btnFont, bg="black", fg="white")
videoButton = Button(window, text="MP4", width=15, command=video, font=btnFont, bg="black", fg="white")

audioButton.config(highlightthickness=2)
audioButton.config(highlightbackground = "white", highlightcolor= "white")

videoButton.config(highlightthickness=2)
videoButton.config(highlightbackground = "white", highlightcolor= "white")

urlEntry.pack()
audioButton.pack(anchor="n", side=LEFT)
videoButton.pack(anchor="n", side=RIGHT)

window.resizable(False,False)

window.mainloop()
